{"version":3,"file":"static/js/380.dc2c9352.chunk.js","mappings":"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","sources":["components/Cards/TitleCard.js","components/Typography/Subtitle.js","features/charts/components/LineChart.js","features/charts/components/BarChart.js","features/charts/components/DoughnutChart.js","features/charts/components/PieChart.js","features/charts/components/ScatterChart.js","features/charts/components/StackBarChart.js","features/charts/index.js","pages/protected/Charts.js"],"sourcesContent":["import Subtitle from \"../Typography/Subtitle\"\n\n  \n  function TitleCard({title, children, topMargin, TopSideButtons}){\n      return(\n          <div className={\"card w-full p-6 bg-base-100 shadow-xl \" + (topMargin || \"mt-6\")}>\n\n            {/* Title for Card */}\n              <Subtitle styleClass={TopSideButtons ? \"inline-block\" : \"\"}>\n                {title}\n\n                {/* Top side button, show only if present */}\n                {\n                    TopSideButtons && <div className=\"inline-block float-right\">{TopSideButtons}</div>\n                }\n              </Subtitle>\n              \n              <div className=\"divider mt-2\"></div>\n          \n              {/** Card Body */}\n              <div className='h-full w-full pb-6 bg-base-100'>\n                  {children}\n              </div>\n          </div>\n          \n      )\n  }\n  \n  \n  export default TitleCard"," function Subtitle({styleClass, children}){\n    return(\n        <div className={`text-xl font-semibold ${styleClass}`}>{children}</div>\n    )\n}\n\nexport default Subtitle","import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Filler,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Filler,\n  Legend\n);\n\nfunction LineChart(){\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n    },\n  };\n\n  \n  const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n\n  const data = {\n  labels,\n  datasets: [\n    {\n      fill: true,\n      label: 'MAU',\n      data: labels.map(() => { return Math.random() * 100 + 500 }),\n      borderColor: 'rgb(53, 162, 235)',\n      backgroundColor: 'rgba(53, 162, 235, 0.5)',\n    },\n  ],\n};\n  \n\n    return(\n      <TitleCard title={\"Montly Active Users (in k)\"} >\n          <Line data={data} options={options}/>\n      </TitleCard>\n    )\n}\n\n\nexport default LineChart","import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nfunction BarChart(){\n\n    const options = {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top',\n          }\n        },\n      };\n      \n      const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n      \n      const data = {\n        labels,\n        datasets: [\n          {\n            label: 'Store 1',\n            data: labels.map(() => { return Math.random() * 1000 + 500 }),\n            backgroundColor: 'rgba(255, 99, 132, 1)',\n          },\n          {\n            label: 'Store 2',\n            data: labels.map(() => { return Math.random() * 1000 + 500 }),\n            backgroundColor: 'rgba(53, 162, 235, 1)',\n          },\n        ],\n      };\n\n    return(\n      <TitleCard title={\"No of Orders\"} topMargin=\"mt-2\">\n            <Bar options={options} data={data} />\n      </TitleCard>\n\n    )\n}\n\n\nexport default BarChart","import {\n  Chart as ChartJS,\n  Filler,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\nimport Subtitle from '../../../components/Typography/Subtitle';\n\nChartJS.register(ArcElement, Tooltip, Legend,\n    Tooltip,\n    Filler,\n    Legend);\n\nfunction DoughnutChart(){\n\n    const options = {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top',\n          },\n        },\n      };\n      \n      const labels = ['Electronics', 'Home Applicances', 'Beauty', 'Furniture', 'Watches', 'Apparel'];\n      \n      const data = {\n        labels,\n        datasets: [\n            {\n                label: '# of Orders',\n                data: [122, 219, 30, 51, 82, 13],\n                backgroundColor: [\n                  'rgba(255, 99, 132, 0.8)',\n                  'rgba(54, 162, 235, 0.8)',\n                  'rgba(255, 206, 86, 0.8)',\n                  'rgba(75, 192, 192, 0.8)',\n                  'rgba(153, 102, 255, 0.8)',\n                  'rgba(255, 159, 64, 0.8)',\n                ],\n                borderColor: [\n                  'rgba(255, 99, 132, 1)',\n                  'rgba(54, 162, 235, 1)',\n                  'rgba(255, 206, 86, 1)',\n                  'rgba(75, 192, 192, 1)',\n                  'rgba(153, 102, 255, 1)',\n                  'rgba(255, 159, 64, 1)',\n                ],\n                borderWidth: 1,\n              }\n        ],\n      };\n\n    return(\n        <TitleCard title={\"Orders by Category\"}>\n                <Doughnut options={options} data={data} />\n        </TitleCard>\n    )\n}\n\n\nexport default DoughnutChart","import {\n    Chart as ChartJS,\n    Filler,\n    ArcElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\n  import { Pie } from 'react-chartjs-2';\n  import TitleCard from '../../../components/Cards/TitleCard';\n  import Subtitle from '../../../components/Typography/Subtitle';\n  \n  ChartJS.register(ArcElement, Tooltip, Legend,\n      Tooltip,\n      Filler,\n      Legend);\n  \n  function PieChart(){\n  \n      const options = {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top',\n            },\n          },\n        };\n        \n        const labels = ['India', 'Middle East', 'Europe', 'US', 'Latin America', 'Asia(non-india)'];\n        \n        const data = {\n          labels,\n          datasets: [\n              {\n                  label: '# of Orders',\n                  data: [122, 219, 30, 51, 82, 13],\n                  backgroundColor: [\n                    'rgba(255, 99, 255, 0.8)',\n                    'rgba(54, 162, 235, 0.8)',\n                    'rgba(255, 206, 255, 0.8)',\n                    'rgba(75, 192, 255, 0.8)',\n                    'rgba(153, 102, 255, 0.8)',\n                    'rgba(255, 159, 255, 0.8)',\n                  ],\n                  borderColor: [\n                    'rgba(255, 99, 255, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 255, 1)',\n                    'rgba(75, 192, 255, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 255, 1)',\n                  ],\n                  borderWidth: 1,\n                }\n          ],\n        };\n  \n      return(\n          <TitleCard title={\"Orders by country\"}>\n                  <Pie options={options} data={data} />\n          </TitleCard>\n      )\n  }\n  \n  \n  export default PieChart","import {\n    Chart as ChartJS,\n    Filler,\n    ArcElement,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\n  import { Scatter } from 'react-chartjs-2';\n  import TitleCard from '../../../components/Cards/TitleCard';\n  \n  ChartJS.register(ArcElement, Tooltip, Legend,\n      Tooltip,\n      Filler,\n      Legend);\n  \n  function ScatterChart(){\n  \n      const options = {\n            scales: {\n                y: {\n                    beginAtZero: true,\n                },\n            },\n        };\n        \n        const data = {\n          datasets: [\n            {\n              label: 'Orders > 1k',\n              data: Array.from({ length: 100 }, () => ({\n                x: Math.random() * 11,\n                y: Math.random() * 31,\n              })),\n              backgroundColor: 'rgba(255, 99, 132, 1)',\n            },\n            {\n                label: 'Orders > 2K',\n                data: Array.from({ length: 100 }, () => ({\n                  x: Math.random() * 12,\n                  y: Math.random() * 12,\n                })),\n                backgroundColor: 'rgba(0, 0, 255, 1)',\n              },\n          ],\n        };\n  \n      return(\n          <TitleCard title={\"No of Orders by month (in k)\"}>\n                  <Scatter options={options} data={data} />\n          </TitleCard>\n      )\n  }\n  \n  \n  export default ScatterChart","import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from 'chart.js';\n  import { Bar } from 'react-chartjs-2';\n  import TitleCard from '../../../components/Cards/TitleCard';\n  \n  ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n  \n  function StackBarChart(){\n  \n      const options = {\n            responsive: true,\n            scales: {\n                x: {\n                    stacked: true,\n                },\n                y: {\n                    stacked: true,\n                },\n            },\n        };\n        \n        const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n        \n        const data = {\n          labels,\n          datasets: [\n            {\n              label: 'Store 1',\n              data: labels.map(() => { return Math.random() * 1000 + 500 }),\n              backgroundColor: 'rgba(255, 99, 132, 1)',\n            },\n            {\n              label: 'Store 2',\n              data: labels.map(() => { return Math.random() * 1000 + 500 }),\n              backgroundColor: 'rgba(53, 162, 235, 1)',\n            },\n            {\n                label: 'Store 3',\n                data: labels.map(() => { return Math.random() * 1000 + 500 }),\n                backgroundColor: 'rgba(235, 162, 235, 1)',\n              },\n          ],\n        };\n  \n      return(\n        <TitleCard title={\"Sales\"} topMargin=\"mt-2\">\n              <Bar options={options} data={data} />\n        </TitleCard>\n  \n      )\n  }\n  \n  \n  export default StackBarChart","import LineChart from './components/LineChart'\nimport BarChart from './components/BarChart'\nimport DoughnutChart from './components/DoughnutChart'\nimport PieChart from './components/PieChart'\nimport ScatterChart from './components/ScatterChart'\nimport StackBarChart from './components/StackBarChart'\nimport Datepicker from \"react-tailwindcss-datepicker\"; \nimport { useState } from 'react'\n\n\n\n\nfunction Charts(){\n\n    const [dateValue, setDateValue] = useState({ \n        startDate: new Date(), \n        endDate: new Date() \n    }); \n    \n    const handleDatePickerValueChange = (newValue) => {\n        console.log(\"newValue:\", newValue); \n        setDateValue(newValue); \n    } \n\n    return(\n        <>\n        <Datepicker \n                containerClassName=\"w-72\" \n                value={dateValue} \n                theme={\"light\"}\n                inputClassName=\"input input-bordered w-72\" \n                popoverDirection={\"down\"}\n                toggleClassName=\"invisible\"\n                onChange={handleDatePickerValueChange} \n                showShortcuts={true} \n                primaryColor={\"white\"} \n            /> \n        {/** ---------------------- Different charts ------------------------- */}\n            <div className=\"grid lg:grid-cols-2 mt-0 grid-cols-1 gap-6\">\n                <StackBarChart />\n                <BarChart />\n            </div>\n\n        \n            <div className=\"grid lg:grid-cols-2 mt-4 grid-cols-1 gap-6\">\n                <DoughnutChart />\n                <PieChart />\n            </div>\n\n            <div className=\"grid lg:grid-cols-2 mt-4 grid-cols-1 gap-6\">\n                <ScatterChart />\n                <LineChart />\n            </div>\n        </>\n    )\n}\n\nexport default Charts","import { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport Charts from '../../features/charts'\nimport { setPageTitle } from '../../features/common/headerSlice'\n\nfunction InternalPage(){\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setPageTitle({ title : \"Analytics\"}))\n      }, [])\n\n\n    return(\n        <Charts />\n    )\n}\n\nexport default InternalPage"],"names":["_ref","title","children","topMargin","TopSideButtons","_jsxs","className","Subtitle","styleClass","_jsx","concat","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Filler","Legend","labels","data","datasets","fill","label","map","Math","random","borderColor","backgroundColor","TitleCard","Line","options","responsive","plugins","legend","position","BarElement","Bar","ArcElement","borderWidth","Doughnut","Pie","Array","from","length","x","y","Scatter","scales","beginAtZero","stacked","_useState","useState","startDate","Date","endDate","_useState2","_slicedToArray","dateValue","setDateValue","_Fragment","Datepicker","containerClassName","value","theme","inputClassName","popoverDirection","toggleClassName","onChange","newValue","console","log","showShortcuts","primaryColor","StackBarChart","BarChart","DoughnutChart","PieChart","ScatterChart","LineChart","dispatch","useDispatch","useEffect","setPageTitle","Charts"],"sourceRoot":""}